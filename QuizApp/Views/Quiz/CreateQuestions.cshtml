@model List<QuizApp.Models.ViewModels.QuestionCreateViewModel>
@{
    ViewData["Title"] = "Yeni Sual Əlavə Et";
}
<style>
    .create-questions-page {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 40px 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .create-container {
        max-width: 1000px;
        margin: 0 auto;
    }

    .create-header {
        background: white;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .create-title {
        color: #667eea;
        font-size: 32px;
        font-weight: 700;
        margin: 0;
    }

    .validation-summary-errors {
        background: #f8d7da;
        border: 2px solid #f5c6cb;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 25px;
        color: #721c24;
    }

        .validation-summary-errors ul {
            margin: 10px 0 0 0;
            padding-left: 20px;
        }

        .validation-summary-errors li {
            margin: 5px 0;
            font-weight: 600;
        }

    .field-validation-error {
        color: #dc3545;
        font-size: 13px;
        margin-top: 5px;
        display: block;
        font-weight: 600;
    }

    .input-validation-error {
        border-color: #dc3545 !important;
        background-color: #fff5f5;
    }

    .questions-wrapper {
        margin-bottom: 30px;
    }

    .question-card-create {
        background: white;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        border-left: 5px solid #667eea;
    }

        .question-card-create:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
        }

    .question-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f0f0f0;
    }

    .question-title-create {
        color: #667eea;
        font-size: 24px;
        font-weight: 700;
        margin: 0;
    }

    .delete-question-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        font-size: 14px;
    }

        .delete-question-btn:hover {
            background: #c82333;
            transform: scale(1.05);
        }

    .field-group {
        margin-bottom: 20px;
    }

    .field-label {
        display: block;
        color: #495057;
        font-weight: 600;
        margin-bottom: 10px;
        font-size: 15px;
    }

    .field-input {
        width: 100%;
        padding: 14px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 15px;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

        .field-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    /* Difficulty badges */
    .difficulty-select-wrapper {
        display: flex;
        gap: 12px;
        margin-top: 10px;
    }

    .difficulty-option {
        flex: 1;
    }

    .difficulty-radio {
        display: none;
    }

    .difficulty-label {
        display: block;
        padding: 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        .difficulty-label.easy {
            color: #28a745;
            background: #f0fff4;
        }

        .difficulty-label.medium {
            color: #ffc107;
            background: #fffbf0;
        }

        .difficulty-label.hard {
            color: #dc3545;
            background: #fff5f5;
        }

    .difficulty-radio:checked + .difficulty-label {
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

        .difficulty-radio:checked + .difficulty-label.easy {
            border-color: #28a745;
            background: #28a745;
            color: white;
        }

        .difficulty-radio:checked + .difficulty-label.medium {
            border-color: #ffc107;
            background: #ffc107;
            color: white;
        }

        .difficulty-radio:checked + .difficulty-label.hard {
            border-color: #dc3545;
            background: #dc3545;
            color: white;
        }

    .answers-wrapper {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
    }

    .answers-title-small {
        color: #495057;
        font-size: 18px;
        font-weight: 700;
        margin-bottom: 15px;
    }

    .answer-item-create {
        background: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 12px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }

        .answer-item-create:hover {
            border-color: #667eea;
        }

    .answer-input-create {
        width: 100%;
        padding: 10px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        margin-bottom: 10px;
        box-sizing: border-box;
        transition: all 0.3s ease;
    }

        .answer-input-create:focus {
            outline: none;
            border-color: #667eea;
        }

    .correct-check-wrapper {
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .correct-check-wrapper input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        .correct-check-wrapper label {
            margin: 0;
            cursor: pointer;
            font-weight: 600;
            color: #0066cc;
            font-size: 14px;
        }

    .add-answer-btn-create {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        border: none;
        color: white;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 700;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 10px;
    }

        .add-answer-btn-create:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(56, 239, 125, 0.4);
        }

    .main-actions {
        display: flex;
        gap: 15px;
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }

    .btn-add-question {
        flex: 1;
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        border: none;
        color: white;
        padding: 18px;
        font-size: 16px;
        font-weight: 700;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-add-question:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(245, 87, 108, 0.4);
        }

    .btn-submit-all {
        flex: 2;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        padding: 18px;
        font-size: 16px;
        font-weight: 700;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-submit-all:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }
</style>

<div class="create-questions-page">
    <div class="create-container">
        <div class="create-header">
            <h2 class="create-title">Yeni Suallar Əlavə Et</h2>
        </div>

        <form asp-action="CreateQuestions" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="All" class="validation-summary-errors"></div>

            <div id="questions" class="questions-wrapper">
                <div class="question-card-create">
                    <div class="question-card-header">
                        <h4 class="question-title-create">
                            Sual <span class="question-index">1</span>
                        </h4>
                        <button type="button" class="delete-question-btn delete-question">
                            Sualı Sil
                        </button>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Sual Mətni *</label>
                        <input type="text" name="models[0].Text" class="field-input" placeholder="Sualı daxil edin..." required />
                        <span class="field-validation-error" data-valmsg-for="models[0].Text"></span>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Çətinlik Dərəcəsi *</label>
                        <div class="difficulty-select-wrapper">
                            <div class="difficulty-option">
                                <input type="radio" name="models[0].Difficulty" value="1" class="difficulty-radio" id="q0_diff_easy" checked />
                                <label for="q0_diff_easy" class="difficulty-label easy">Asan</label>
                            </div>
                            <div class="difficulty-option">
                                <input type="radio" name="models[0].Difficulty" value="2" class="difficulty-radio" id="q0_diff_medium" />
                                <label for="q0_diff_medium" class="difficulty-label medium">Orta</label>
                            </div>
                            <div class="difficulty-option">
                                <input type="radio" name="models[0].Difficulty" value="3" class="difficulty-radio" id="q0_diff_hard" />
                                <label for="q0_diff_hard" class="difficulty-label hard">Çətin</label>
                            </div>
                        </div>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Şəkil Yüklə (istəyə bağlı)</label>
                        <input type="file" name="models[0].ImageFile" class="field-input" accept="image/*" />
                    </div>

                    <div class="field-group">
                        <label class="field-label">Kataloq Seçin *</label>
                        <select name="models[0].CatalogId" class="field-input" required>
                            <option value="">-- Kataloq seçin --</option>
                            @foreach (var catalog in ViewBag.Catalogs)
                            {
                                <option value="@catalog.Id">@catalog.Title</option>
                            }
                        </select>
                        <span class="field-validation-error" data-valmsg-for="models[0].CatalogId"></span>
                    </div>

                    <div class="answers-wrapper">
                        <h5 class="answers-title-small">Cavablar</h5>
                        <div class="answers">
                            <div class="answer-item-create">
                                <input type="text" name="models[0].Answers[0].Text"
                                       class="answer-input-create" placeholder="Cavab 1" required />
                                <div class="correct-check-wrapper">
                                    <input type="checkbox" name="models[0].Answers[0].IsCorrect"
                                           value="true" id="q0_a0" />
                                    <label for="q0_a0">Doğru Cavab</label>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="add-answer-btn-create add-answer">
                            + Cavab Əlavə Et
                        </button>
                    </div>
                </div>
            </div>

            <div class="main-actions">
                <button type="button" class="btn-add-question" onclick="addQuestion()">
                    Yeni Sual Əlavə Et
                </button>
                <button type="submit" class="btn-submit-all">
                    Hamısını Saxla
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        let questionCount = document.querySelectorAll(".question-card-create").length;

        function addQuestion() {
            let index = questionCount;
            let html = `
                <div class="question-card-create">
                    <div class="question-card-header">
                        <h4 class="question-title-create">
                            Sual <span class="question-index">${index + 1}</span>
                        </h4>
                        <button type="button" class="delete-question-btn delete-question">
                            Sualı Sil
                        </button>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Sual Mətni *</label>
                        <input type="text" name="models[${index}].Text" class="field-input" placeholder="Sualı daxil edin..." required />
                        <span class="field-validation-error" data-valmsg-for="models[${index}].Text"></span>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Çətinlik Dərəcəsi *</label>
                        <div class="difficulty-select-wrapper">
                            <div class="difficulty-option">
                                <input type="radio" name="models[${index}].Difficulty" value="1" class="difficulty-radio" id="q${index}_diff_easy" checked />
                                <label for="q${index}_diff_easy" class="difficulty-label easy">Asan</label>
                            </div>
                            <div class="difficulty-option">
                                <input type="radio" name="models[${index}].Difficulty" value="2" class="difficulty-radio" id="q${index}_diff_medium" />
                                <label for="q${index}_diff_medium" class="difficulty-label medium">Orta</label>
                            </div>
                            <div class="difficulty-option">
                                <input type="radio" name="models[${index}].Difficulty" value="3" class="difficulty-radio" id="q${index}_diff_hard" />
                                <label for="q${index}_diff_hard" class="difficulty-label hard">Çətin</label>
                            </div>
                        </div>
                    </div>

                    <div class="field-group">
                        <label class="field-label">Şəkil Yüklə (istəyə bağlı)</label>
                        <input type="file" name="models[${index}].ImageFile" class="field-input" accept="image/*" />
                    </div>

                    <div class="field-group">
                        <label class="field-label">Kataloq Seçin *</label>
                        <select name="models[${index}].CatalogId" class="field-input" required>
                            <option value="">-- Kataloq seçin --</option>
                            @foreach (var catalog in ViewBag.Catalogs)
                            {
                                <option value="@catalog.Id">@catalog.Title</option>
                            }
                        </select>
                        <span class="field-validation-error" data-valmsg-for="models[${index}].CatalogId"></span>
                    </div>

                    <div class="answers-wrapper">
                        <h5 class="answers-title-small">Cavablar</h5>
                        <div class="answers">
                            <div class="answer-item-create">
                                <input type="text" name="models[${index}].Answers[0].Text"
                                       class="answer-input-create" placeholder="Cavab 1" required />
                                <div class="correct-check-wrapper">
                                    <input type="checkbox" name="models[${index}].Answers[0].IsCorrect"
                                           value="true" id="q${index}_a0" />
                                    <label for="q${index}_a0">Doğru Cavab</label>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="add-answer-btn-create add-answer">
                            + Cavab Əlavə Et
                        </button>
                    </div>
                </div>
            `;
            document.getElementById("questions").insertAdjacentHTML("beforeend", html);
            questionCount++;
        }

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("add-answer")) {
                let questionDiv = event.target.closest(".question-card-create");
                let answersDiv = questionDiv.querySelector(".answers");
                let questionIndex = Array.from(document.querySelectorAll(".question-card-create")).indexOf(questionDiv);
                let answerCount = answersDiv.querySelectorAll(".answer-item-create").length;

                let html = `
                    <div class="answer-item-create">
                        <input type="text" name="models[${questionIndex}].Answers[${answerCount}].Text"
                               class="answer-input-create" placeholder="Cavab ${answerCount + 1}" required />
                        <div class="correct-check-wrapper">
                            <input type="checkbox" name="models[${questionIndex}].Answers[${answerCount}].IsCorrect"
                                   value="true" id="q${questionIndex}_a${answerCount}" />
                            <label for="q${questionIndex}_a${answerCount}">Doğru Cavab</label>
                        </div>
                    </div>
                `;
                answersDiv.insertAdjacentHTML("beforeend", html);
            }

            if (event.target.classList.contains("delete-question")) {
                let questionDiv = event.target.closest(".question-card-create");
                if (document.querySelectorAll(".question-card-create").length > 1) {
                    questionDiv.remove();
                    updateQuestionIndexes();
                } else {
                    alert("Ən azı bir sual olmalıdır!");
                }
            }
        });

        function updateQuestionIndexes() {
            let questionItems = document.querySelectorAll(".question-card-create");
            questionItems.forEach((item, i) => {
                item.querySelector(".question-index").textContent = i + 1;
                item.querySelector("input[name^='models'][type='text']").setAttribute("name", `models[${i}].Text`);

                // Difficulty radio buttons
                let diffRadios = item.querySelectorAll("input[type='radio'][name*='Difficulty']");
                diffRadios.forEach((radio, idx) => {
                    radio.setAttribute("name", `models[${i}].Difficulty`);
                    radio.id = `q${i}_diff_${['easy','medium','hard'][idx]}`;
                    radio.nextElementSibling.setAttribute("for", radio.id);
                });

                let fileInput = item.querySelector("input[type='file']");
                if (fileInput) fileInput.setAttribute("name", `models[${i}].ImageFile`);

                item.querySelector("select[name^='models']").setAttribute("name", `models[${i}].CatalogId`);

                let answerItems = item.querySelectorAll(".answer-item-create");
                answerItems.forEach((answerItem, j) => {
                    let inputText = answerItem.querySelector("input[type='text']");
                    let inputCheckbox = answerItem.querySelector("input[type='checkbox']");
                    let label = answerItem.querySelector("label");

                    inputText.setAttribute("name", `models[${i}].Answers[${j}].Text`);
                    inputText.placeholder = `Cavab ${j + 1}`;

                    inputCheckbox.setAttribute("name", `models[${i}].Answers[${j}].IsCorrect`);
                    inputCheckbox.id = `q${i}_a${j}`;
                    label.setAttribute("for", `q${i}_a${j}`);
                });
            });

            questionCount = questionItems.length;
        }

        document.querySelector('form').addEventListener('submit', function(e) {
            let hasErrors = false;
            let errorMessages = [];

            document.querySelectorAll('.question-card-create').forEach((card, index) => {
                let textInput = card.querySelector('input[name$=".Text"]');
                let catalogSelect = card.querySelector('select[name$=".CatalogId"]');

                if (!textInput.value.trim()) {
                    hasErrors = true;
                    errorMessages.push(`Sual ${index + 1}: Sual mətni boş ola bilməz`);
                }

                if (!catalogSelect.value) {
                    hasErrors = true;
                    errorMessages.push(`Sual ${index + 1}: Kataloq seçilməlidir`);
                }

                let answers = card.querySelectorAll('.answer-item-create input[type="text"]');
                if (answers.length === 0) {
                    hasErrors = true;
                    errorMessages.push(`Sual ${index + 1}: Ən azı bir cavab olmalıdır`);
                }
            });

            if (hasErrors) {
                e.preventDefault();
                alert('Xətalar:\n\n' + errorMessages.join('\n'));
            }
        });
    </script>
}